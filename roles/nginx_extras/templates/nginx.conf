# Defines user and group credentials used by worker processes. If group is
# omitted, a group whose name equals that of user is used.
user    nginx;

# Defines the number of worker processes.    Setting it to the number of
# available CPU cores should be a good start. The value `auto` will try to
# autodetect that.
worker_processes auto;

# Configures logging to `/var/log/...`. Log level `error` is used by default.
error_log /var/log/nginx/error.log;

# Defines a file that will store the process ID of the main process. This needs
# to match the Systemd unit file.
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
  # Sets the maximum number of simultaneous connections that can be opened by
  # a worker process.
  worker_connections 1024;
}

http {
  # Include mime types for different file extensions.
  include /etc/nginx/mime.types;

  # Disable access log.
  #access_log /var/log/nginx/access.log;
  access_log off;

  # Defines the default MIME type of a response.
  default_type application/octet-stream;

  # Sendfile copies data between one file descriptor and other from within the
  # kernel. This is more efficient than read() and write() since they require
  # transferring data to and from the user space.
  sendfile on;

  # Todo: Write explanation
  # https://t37.net/nginx-optimization-understanding-sendfile-tcp_nodelay-and-tcp_nopush.html
  tcp_nopush on;
  tcp_nodelay on;

  # Enable on-the-fly gzip compression for larger plain text files and for
  # proxies applications.
  gzip on;
  gzip_comp_level 9;
  gzip_min_length 1000;
  gzip_proxied expired no-cache no-store private auth;
  gzip_types
      application/javascript
      application/json
      application/x-javascript
      application/xml
      image/svg+xml
      text/css
      text/javascript
      text/js
      text/plain
      text/xml;

  # Do not send the nginx version number in error pages and Server header
  server_tokens off;

  # Enforce HTTPS by redirecting requests
  server {
    listen 80;
    listen [::]:80;
    server_name {{ groups["allinone"][0] }};

    # Serve certbot ACME requests
    location /.well-known/ {
      root /var/lib/nginx/;
    }

    # Enforce encrypted connections for everything else
    location / {
      return 301 https://{{ groups["allinone"][0] }}$request_uri;
    }
  }
  server {
    listen 80;
    listen [::]:80;
    server_name {{ groups["tobira"][0] }};

    # Serve certbot ACME requests
    location /.well-known/ {
      root /var/lib/nginx/;
    }

    # Enforce encrypted connections for everything else
    location / {
      return 301 https://{{ groups["tobira"][0] }}$request_uri;
    }
  }

  map $http_origin $cors_ok {
    default                0;
    ~*https://explore.opencast.org$  1;
  }

  map $cors_ok $cors_origin {
    default  '';
    1            $http_origin;
  }

  map $cors_ok $cors_credentials {
    default  '';
    1            true;
  }

  # Opencast
  server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name {{ groups["allinone"][0] }};

    ssl_certificate_key /etc/nginx/tls/{{ groups["allinone"][0] }}.key;
    ssl_certificate     /etc/nginx/tls/{{ groups["allinone"][0] }}.crt;

    # Additional TLS related Nginx options
    include /etc/nginx/tls/tls.conf;

    # Accept large ingests
    client_max_body_size 0;

    location /protected {
      internal;
      alias {{ opencast_storage_folder }}/downloads;

      # CORS
      add_header Access-Control-Allow-Origin   '$cors_origin' always;
      add_header Access-Control-Allow-Credentials  '$cors_credentials' always;
      add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
      add_header Access-Control-Allow-Headers 'Origin,Content-Type,Accept,Authorization' always;
      if ($request_method = OPTIONS) {
        return 200;
      }
    }

    location / {
      proxy_set_header        Host $host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header        X-Forwarded-Proto $scheme;
      proxy_pass              http://127.0.0.1:8080;

      # Make sure to redirect location headers to HTTPS
      proxy_redirect http://$host https://$host;

      # Ensure Cookies are marked as Secure and HTTPOnly
      proxy_cookie_path / "/; HTTPOnly; Secure; SameSite=none";

      # Do not buffer responses
      proxy_buffering off;

      # Do not buffer requests
      proxy_request_buffering off;

      # CORS
      add_header Access-Control-Allow-Origin   '$cors_origin' always;
      add_header Access-Control-Allow-Credentials  '$cors_credentials' always;
      add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
      add_header Access-Control-Allow-Headers 'Origin,Content-Type,Accept,Authorization' always;
      if ($request_method = OPTIONS) {
        return 200;
      }
    }
  }

  # Tobira
  server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name {{ groups["tobira"][0] }};

    ssl_certificate_key /etc/nginx/tls/{{ groups["tobira"][0] }}.key;
    ssl_certificate     /etc/nginx/tls/{{ groups["tobira"][0] }}.crt;

    # Additional TLS related Nginx options
    include /etc/nginx/tls/tls.conf;

    # Workaround to host images
    location /~img/ {
      root /opt/tobira/;
    }

    location / {
      proxy_set_header        Host $host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header        X-Forwarded-Proto $scheme;
      proxy_pass              http://127.0.0.1:3080;
    }
  }
}
